
# brief : plot the matching performance improvement over the raw frames by matching processed frames with satellites

# -----------------------------------------------------------------------------
# import modules

import cv2
import numpy as np
import glob
import os
import argparse
import json
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


def main():

    parser = argparse.ArgumentParser(description='plot mupltiple frames matching rates graph of one flight')
    parser.add_argument('super_dir', help='requires a super directory')

    args = parser.parse_args()
    super_dir = args.super_dir
    frame_files_list = glob.glob(os.path.join(super_dir + '/*', '*.json'))  ## get all matching details generated by bilateral_match.py
    
    rates_list = list()
    directory = os.getcwd()
    file_o = "multiple_frames"  ## name of the output plot
    dst_path = os.path.join(directory, file_o)

    for frame_file in frame_files_list:
        rate_list = list()
        para_list = list()
        with open(frame_file, "r") as fi:
            frame = json.load(fi)
            for image, rate in frame.items():
        
                text = os.path.basename(image)
                name = os.path.splitext(text)[0]
                pval = name.split('_')[1]
                para_list.append(pval)
                rate_list.append(rate)

        color = np.random.rand(3,1)
        plt.scatter(para_list, rate_list, facecolors=color, edgecolors=color, s=30)
        #plt.plot(para_list, rate_list, 'bo')
        plt.ylabel('matching rate')
        plt.xlabel('Diameter of each pixel neighborhood')
        plt.title('matching performance bilateral filtering')
        plt.grid(True)
        plt.savefig(dst_path)


if __name__ == '__main__':

    main()
